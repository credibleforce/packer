---
  # take the simplified settings file and convert to a "normalized" setting config
  # this is used to support cross project config
  - hosts: local
    pre_tasks:
      - name: Lab settings variables
        include_vars: ../../vagrant/lab_settings.yml
    gather_facts: false
    tasks:
      - name: Create lab settings file
        template:
          src: ../templates/lab.yml.j2
          dest: "../vars/lab.yml"

  # update the list of known_hosts so ssh will not fail to connect
  - hosts: all
    gather_facts: false
    vars:
      ansible_connection: local
      ansible_python_interpreter: "{{ ansible_playbook_python }}"
    pre_tasks:
      - name: Lab variables
        include_vars: ../vars/lab.yml
    tasks:
      - name: Run whoami without become.
        delegate_to: localhost
        command: whoami
        changed_when: false
        become: false
        register: whoami

      # at build as dns is unavailable we need to ensure we use ansible_host
      - name: Remove any existing host keys by name and assigned ip
        delegate_to: localhost
        shell: |
          ssh-keygen -f "$HOME/.ssh/known_hosts" -R "{{inventory_hostname}}"
          ssh-keygen -f "$HOME/.ssh/known_hosts" -R "{{ansible_host}}"
          ssh-keygen -f "$HOME/.ssh/known_hosts" -R "{{hostvars[inventory_hostname].prod_ip}}"
        ignore_errors: true
        when:
          - hostvars[inventory_hostname].ansible_connection is not defined or (hostvars[inventory_hostname].ansible_connection is defined and hostvars[inventory_hostname].ansible_connection=='ssh')

      - name: get port, default 22
        delegate_to: localhost
        set_fact:
          ansible_ssh_port: "{{ hostvars[inventory_hostname]['ansible_ssh_port'] | default('22') }}"
        when:
          - hostvars[inventory_hostname].ansible_connection is not defined or (hostvars[inventory_hostname].ansible_connection is defined and hostvars[inventory_hostname].ansible_connection=='ssh')

      # at build as dns is unavailable we need to ensure we use ansible_host
      - name: Ensure ssh host key by ansible_host
        delegate_to: localhost
        lineinfile:
          dest: ~/.ssh/known_hosts
          create: true
          state: present
          line: "{{ lookup('pipe', 'ssh-keyscan -trsa -p' + ansible_ssh_port + ' ' + ansible_host, errors='warn') }}"
        when:
          - hostvars[inventory_hostname].ansible_connection is not defined or (hostvars[inventory_hostname].ansible_connection is defined and hostvars[inventory_hostname].ansible_connection=='ssh')

  # prep ansible server
  - hosts: ansible
    vars:
      ssh_key_filename: id_lab
    gather_facts: True
    pre_tasks:
      - name: Lab variables
        include_vars: ../vars/lab.yml
    tasks:
      - name: Purge existing lab key if present
        delegate_to: localhost
        file: 
          path: "{{ item }}"
          state: absent
        with_items:
          - ~/.ssh/{{ ssh_key_filename }}
          - ~/.ssh/{{ ssh_key_filename }}.pub

      - name: Generate local lab ssh key
        delegate_to: localhost
        openssh_keypair:
          path: "~/.ssh/{{ ssh_key_filename }}"
          type: rsa
          size: 4096
          state: present
          force: yes

      - name: Add .ssh directory
        file:
          path: "~/.ssh"
          state: directory
          mode: 0700

      - name: Add lab SSH private key
        copy:
          src: "~/.ssh/{{ ssh_key_filename }}"
          dest: "~/.ssh/id_rsa"
          mode: 0600

      - name: Add lab SSH public key
        copy:
          src: "~/.ssh/{{ ssh_key_filename }}.pub"
          dest: "~/.ssh/id_rsa.pub"
          mode: 0600

      - name: Enable EPEL Repo
        become: true
        yum:
          name:
            - epel-release

      - name: Install Ansible
        become: true
        yum:
          name:
            - ansible
          state: present

      - name: Install Ansible Python Requirements
        become: true
        pip:
          name:
            - requests
            - pywinrm
          state: present

      - name: Install ansible-galaxy collections
        shell:
          ansible-galaxy collection install ansible.windows community.windows

      - name: Run whoami without become.
        command: whoami
        changed_when: false
        become: false
        register: whoami

      - name: Add lab key to authorized key
        authorized_key:
          user: "{{ whoami.stdout }}"
          state: present
          key: "{{ lookup('file', '~/.ssh/{{ ssh_key_filename }}.pub') }}"

      - name: Create lab inventory directory
        file:
          path: "~/deployment/ansible"
          state: directory
          mode: 0700

      - name: Create lab playbooks directory
        file:
          path: "~/deployment/ansible/playbooks"
          state: directory
          mode: 0700

      - name: Add lab inventory file
        copy:
          src: ../inventory/lab.yml
          dest: "~/deployment/ansible/inventory.yml"
          mode: 0600

      # copy settings file
      - name: Add setting file
        copy:
          src: ../vars/lab.yml
          dest: ~/deployment/ansible/lab_settings.yml
          mode: 0600
      
      # create ansible awx vars
      - name: Create lab settings file
        template:
          src: ../templates/vars.yml.j2
          dest: "~/deployment/ansible/vars.yml"

      # Copy ansible plabooks
      - name: Copy playbookds
        copy:
          src: ../files/playbooks/
          dest: "~/deployment/ansible/playbooks/"
          mode: 0600

    # Copy ansible plabooks
      - name: Copy playbookds
        copy:
          src: ../files/scripts/
          dest: "~/"
          mode: 0700

  # update pfsense with dhcp static reservation and dns entries for hosts
  - hosts: pfsense
    vars:
      ssh_key_filename: id_lab
    gather_facts: False
    pre_tasks:
      - name: Lab variables
        include_vars: ../vars/lab.yml
    tasks:
      - name: Remove domain setting
        become: true
        xml:
          path: /conf/config.xml
          xpath: /pfsense/system/domain
          state: absent

      - name: Add domain
        become: true
        xml:
          path: /conf/config.xml
          xpath: /pfsense/system
          input_type: xml
          pretty_print: yes
          add_children:
            - "<domain>{{ lab.settings.windows.internal_domain }}</domain>"

      # remove sshguard whitelist
      - name: Remove sshguard_whitelist setting
        become: true
        xml:
          path: /conf/config.xml
          xpath: /pfsense/system/sshguard_whitelist
          state: absent

      
      - name: Add empty sshguard_whitelist setting
        become: true
        xml:
          path: /conf/config.xml
          xpath: /pfsense/system
          input_type: xml
          pretty_print: yes
          add_children:
            - "<sshguard_whitelist></sshguard_whitelist>"
      
      - name: Remove any existing static dhcp mappings
        become: true
        xml:
          path: /conf/config.xml
          xpath: /pfsense/dhcpd/lan/staticmap
          state: absent

      - name: Add static mappings for all hosts
        become: true
        xml:
          path: /conf/config.xml
          xpath: /pfsense/dhcpd/lan
          input_type: xml
          pretty_print: yes
          add_children:
            - "<staticmap><mac>{{ hostvars[item]['prod_mac'] }}</mac><cid>{{ hostvars[item]['inventory_hostname'] }}</cid><ipaddr>{{ hostvars[item]['prod_ip'] }}</ipaddr><hostname>{{ hostvars[item]['inventory_hostname'] }}</hostname><descr><![CDATA[{{ hostvars[item]['inventory_hostname'] }}]]></descr><arp_table_static_entry></arp_table_static_entry><filename></filename><rootpath></rootpath><defaultleasetime></defaultleasetime><maxleasetime></maxleasetime><gateway></gateway><domain></domain><domainsearchlist></domainsearchlist><ddnsdomain></ddnsdomain><ddnsdomainprimary></ddnsdomainprimary><ddnsdomainkeyname></ddnsdomainkeyname><ddnsdomainkey></ddnsdomainkey><tftp></tftp><ldap></ldap></staticmap>"
        with_inventory_hostnames:
          - all:!local:!pfsense      

      - name: Remove any existing dns entries mappings
        become: true
        xml:
          path: /conf/config.xml
          xpath: /pfsense/unbound/hosts
          state: absent

      - name: Add dns entry for all hosts
        become: true
        xml:
          path: /conf/config.xml
          xpath: /pfsense/unbound
          input_type: xml
          pretty_print: yes
          add_children:
            "<hosts><host>{{ hostvars[item]['inventory_hostname'] }}</host><domain>{{ lab.settings.windows.internal_domain }}</domain><ip>{{ hostvars[item]['prod_ip'] }}</ip><descr></descr><aliases></aliases></hosts>"
        with_inventory_hostnames:
          - all:!local

      - name: Run whoami without become.
        command: whoami
        changed_when: false
        become: false
        register: whoami

      - name: Add authorized key on Linux
        authorized_key:
          user: "{{ whoami.stdout }}"
          state: present
          key: "{{ lookup('file', '~/.ssh/{{ssh_key_filename}}.pub') }}"
      
      - name: Reboot to apply changes
        become: true
        reboot:
          reboot_timeout: 300
          post_reboot_delay: 90

  # update all of the hostnames with assigned inventory hostname
  - hosts: all:!local:!pfsense
    vars:
      ssh_key_filename: id_lab
      ansible_timeout: 600
    gather_facts: True
    pre_tasks:
      - name: Lab variables
        include_vars: ../vars/lab.yml
    tasks:
      - name: Distribution
        debug: 
            msg:
              - "{{ansible_user_id}}"
              - "{{inventory_hostname}}"
              - "{{ ansible_system }}"
              - "{{ ansible_os_family }}"

      - name: Wait for system to become reachable
        wait_for_connection:
          timeout: 900

      - name: "Windows Base Provisioning"
        win_shell: |
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Wow6432Node\Microsoft\.NetFramework\v4.0.30319' -Name 'SchUseStrongCrypto' -Value '1' -Type DWord
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\.NetFramework\v4.0.30319' -Name 'SchUseStrongCrypto' -Value '1' -Type DWord
          Set-ExecutionPolicy RemoteSigned -Scope LocalMachine
          
          Get-LocalUser -Name "Administrator" | Enable-LocalUser
          $admin = [adsi]("WinNT://./{{ lab.settings.windows.win_admin_user }}, user")
          $admin.PSBase.Invoke("SetPassword", "{{ lab.settings.windows.win_admin_password }}")
          
          # add psgallery
          Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force -Scope AllUsers
          if ($false -eq (get-packagesource | Where-Object { $_.Name -eq "PSGallery" } | % { $_.istrusted })){ 
            Set-PackageSource -Name PSGallery -Trusted -Force 
          }
        when: ansible_system == 'Win32NT'

      # migrate to prod user so we can clean up build account
      - name: "Switch from build user to prod Admin"
        set_fact:
          ansible_ssh_user: "{{ lab.settings.windows.win_admin_user }}"
          ansible_ssh_pass: "{{ lab.settings.windows.win_admin_password  }}"
          ansible_winrm_transport: ntlm
        when: ansible_system == 'Win32NT'

      # provision student account and remove and non default accounts
      - name: "Windows Base Account Setup"
        win_shell: |
          # remove all non-default accounts
          $AccountsToKeep = @('Administrator','DefaultAccount','Guest','WDAGUtilityAccount')
          Get-CimInstance -ClassName Win32_UserAccount -Filter "LocalAccount='True'"  | Where-Object { $_.Name -notin $AccountsToKeep } | % { Remove-LocalUser -Name $_.Name }
          Get-CimInstance -ClassName Win32_UserAccount -Filter "LocalAccount='True'"  | Where-Object { $_.Name -notin $AccountsToKeep } | Remove-CimInstance -ErrorAction SilentlyContinue
          
          # create student account
          New-LocalUser "{{ lab.settings.windows.win_student_user }}" -Password ('{{ lab.settings.windows.win_student_password }}' | ConvertTo-SecureString -AsPlainText -Force) -FullName "Student User" -Description "Student User" -AccountNeverExpires -PasswordNeverExpires
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "{{ lab.settings.windows.win_student_user }}"

          # rename computer
          Rename-Computer -NewName "{{ inventory_hostname }}"
        when: ansible_system == 'Win32NT'

      # important to add this first or sudo fails hostname lookup
      - name: Add hostname to /etc/hosts on Linux
        become: true
        lineinfile:
          dest: /etc/hosts
          regexp: '^127\.0\.0\.1[ \t]+localhost'
          line: '127.0.0.1 localhost {{inventory_hostname}}'
          state: present
        when: ansible_system == 'Linux'

      - name: "Change the hostname on Linux"
        become: true
        hostname:
          name: "{{inventory_hostname}}"
        when: ansible_system == 'Linux'

      - name: Run whoami without become.
        command: whoami
        changed_when: false
        become: false
        register: whoami
        when: ansible_system == 'Linux'

      - name: Add authorized key on Linux
        authorized_key:
          user: "{{ whoami.stdout }}"
          state: present
          key: "{{ lookup('file', '~/.ssh/{{ssh_key_filename}}.pub') }}"
        when: ansible_system == 'Linux'

      - name: Reboot on Windows
        win_reboot:
          reboot_timeout: 300
          post_reboot_delay: 90
        when: ansible_system == 'Win32NT'

      - name: "Update WinRM SSL Certificate with Hostname"
        win_shell: |
          Function New-LegacySelfSignedCert
          {
              Param (
                  [string]$SubjectName,
                  [int]$ValidDays = 1095
              )

              $hostnonFQDN = $env:computerName
              $hostFQDN = [System.Net.Dns]::GetHostByName(($env:computerName)).Hostname
              $SignatureAlgorithm = "SHA256"

              $name = New-Object -COM "X509Enrollment.CX500DistinguishedName.1"
              $name.Encode("CN=$SubjectName", 0)

              $key = New-Object -COM "X509Enrollment.CX509PrivateKey.1"
              $key.ProviderName = "Microsoft Enhanced RSA and AES Cryptographic Provider"
              $key.KeySpec = 1
              $key.Length = 4096
              $key.SecurityDescriptor = "D:PAI(A;;0xd01f01ff;;;SY)(A;;0xd01f01ff;;;BA)(A;;0x80120089;;;NS)"
              $key.MachineContext = 1
              $key.Create()

              $serverauthoid = New-Object -COM "X509Enrollment.CObjectId.1"
              $serverauthoid.InitializeFromValue("1.3.6.1.5.5.7.3.1")
              $ekuoids = New-Object -COM "X509Enrollment.CObjectIds.1"
              $ekuoids.Add($serverauthoid)
              $ekuext = New-Object -COM "X509Enrollment.CX509ExtensionEnhancedKeyUsage.1"
              $ekuext.InitializeEncode($ekuoids)

              $cert = New-Object -COM "X509Enrollment.CX509CertificateRequestCertificate.1"
              $cert.InitializeFromPrivateKey(2, $key, "")
              $cert.Subject = $name
              $cert.Issuer = $cert.Subject
              $cert.NotBefore = (Get-Date).AddDays(-1)
              $cert.NotAfter = $cert.NotBefore.AddDays($ValidDays)

              $SigOID = New-Object -ComObject X509Enrollment.CObjectId
              $SigOID.InitializeFromValue(([Security.Cryptography.Oid]$SignatureAlgorithm).Value)

              [string[]] $AlternativeName  += $hostnonFQDN
              $AlternativeName += $hostFQDN
              $IAlternativeNames = New-Object -ComObject X509Enrollment.CAlternativeNames

              foreach ($AN in $AlternativeName)
              {
                  $AltName = New-Object -ComObject X509Enrollment.CAlternativeName
                  $AltName.InitializeFromString(0x3,$AN)
                  $IAlternativeNames.Add($AltName)
              }

              $SubjectAlternativeName = New-Object -ComObject X509Enrollment.CX509ExtensionAlternativeNames
              $SubjectAlternativeName.InitializeEncode($IAlternativeNames)

              [String[]]$KeyUsage = ("DigitalSignature", "KeyEncipherment")
              $KeyUsageObj = New-Object -ComObject X509Enrollment.CX509ExtensionKeyUsage
              $KeyUsageObj.InitializeEncode([int][Security.Cryptography.X509Certificates.X509KeyUsageFlags]($KeyUsage))
              $KeyUsageObj.Critical = $true

              $cert.X509Extensions.Add($KeyUsageObj)
              $cert.X509Extensions.Add($ekuext)
              $cert.SignatureInformation.HashAlgorithm = $SigOID
              $CERT.X509Extensions.Add($SubjectAlternativeName)
              $cert.Encode()

              $enrollment = New-Object -COM "X509Enrollment.CX509Enrollment.1"
              $enrollment.InitializeFromRequest($cert)
              $certdata = $enrollment.CreateRequest(0)
              $enrollment.InstallResponse(2, $certdata, 0, "")

              # extract/return the thumbprint from the generated cert
              $parsed_cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
              $parsed_cert.Import([System.Text.Encoding]::UTF8.GetBytes($certdata))

              return $parsed_cert.Thumbprint
          }
                    
          $Hostname = [System.Net.Dns]::GetHostByName((hostname)).HostName.ToUpper()
          $thumbprint = New-LegacySelfSignedCert -SubjectName $Hostname
          $listener = Get-ChildItem -Path WSMan:\localhost\Listener | Where-Object { $_.Keys -contains "Transport=HTTPS" } | select-object *

          $thumbprint = Get-ChildItem  -Path Cert:\LocalMachine\MY | where-object { $_.Thumbprint -eq $thumbprint } | select-object Thumbprint
          write-output ("Certificate: {0}" -f $thumbprint.Thumbprint)
          
          # update existing listener
          if($listener -ne $null){
              $name = $listener.PSChildName
              set-item WSMan:\localhost\Listener\$name\Hostname -Value "" -Force 2> $null
              set-item WSMan:\localhost\Listener\$name\CertificateThumbprint -Value $thumbprint.Thumbprint -force 2> $null
          }else{
              New-Item -Path WSMan:\LocalHost\Listener -Address * -Transport HTTPS -Hostname $Hostname -CertificateThumbPrint $thumbprint.Thumbprint -Port "5986" -force
          }
          
          # remove any other certs
          Get-ChildItem  -Path Cert:\LocalMachine\MY | Where-Object {$_.Thumbprint -notmatch $thumbprint.Thumbprint } | Remove-Item

        when: ansible_system == 'Win32NT'

      - name: Reboot to apply changes
        become: true
        reboot:
          reboot_timeout: 300
          post_reboot_delay: 90
        when: ansible_system == 'Linux'