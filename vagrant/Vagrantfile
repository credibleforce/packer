# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'open3'
require 'yaml'

Vagrant.require_version ">= 1.6.2"

class Hash
    def without(*keys)
        cpy = self.dup
        keys.each { |key| cpy.delete(key) }
        cpy
    end
end

$settings = YAML.load_file("lab_settings.yml")

$private_key_path = File.join(Dir.home, ".ssh", "id_rsa")
$public_key_path = File.join(Dir.home, ".ssh", "id_rsa.pub")
$insecure_key_path = File.join(Dir.home, ".vagrant.d", "insecure_private_key")
$private_key = IO.read($private_key_path)
$public_key = IO.read($public_key_path)

$ANSIBLE_DIR = File.join(File.dirname(__FILE__), "..","ansible")
$INVENTORY_FILE = File.join($ANSIBLE_DIR, "inventory","build.yml")
$LAB_INVENTORY_FILE = File.join($ANSIBLE_DIR, "inventory","lab.yml")
$PLAYBOOK_FILE = File.join($ANSIBLE_DIR, "playbooks","build.yml")
$PLAYBOOK_POST_PROD_FILE = File.join($ANSIBLE_DIR, "playbooks","post_prod_migration.yml")

if File.exists?($INVENTORY_FILE)
    File.delete($INVENTORY_FILE)
end

if File.exists?($LAB_INVENTORY_FILE)
    File.delete($LAB_INVENTORY_FILE)
end

# HOST HASHTABLES #
$win08_hosts_override =                  [
                                            # win08 server
                                            #{"name"=>"win08-srv1","prod_ip"=>"172.21.0.80","role"=>"member_server" },
                                        ]

$win12_hosts_override =                  [
                                            # win12 server
                                            #{"name"=>"win12-srv1","prod_ip"=>"172.21.0.70","role"=>"member_server" },
                                        ]

$win16_hosts_override =                  [
                                            # win16 server
                                            #{"name"=>"win16-dc1","prod_ip"=>"172.21.0.5","role"=>"domain_controller,certificate_authority,splunk_universal_forwarder" },
                                            #{"name"=>"win16-wef1","prod_ip"=>"172.21.0.10","role"=>"wef_server,splunk_universal_forwarder" },
                                            #{"name"=>"win16-srv1","prod_ip"=>"172.21.0.11","role"=>"member_server" },
                                        ]

$win19_hosts_override =                  [
                                            # win19 server
                                            #{"name"=>"win19-dc1","prod_ip"=>"172.21.0.5","role"=>"domain_controller,certificate_authority,splunk_universal_forwarder" },
                                            #{"name"=>"win19-wef1","prod_ip"=>"172.21.0.10","role"=>"wef_server,splunk_universal_forwarder" },
                                            #{"name"=>"win19-srv1","prod_ip"=>"172.21.0.11","role"=>"member_server" },
                                        ]

$win10_hosts_override =                  [
                                            # win10 desktop
                                            #{"name"=>"win10-dsk1","prod_ip"=>"172.21.0.20","role"=>"member_server" },
                                        ]

$win7_hosts_override =                   [
                                            # win7 desktop
                                            #{"name"=>"win7-dsk1","prod_ip"=>"172.21.0.21","role"=>"member_server" },
                                        ]

$centos_hosts_override =                 [
                                            # ansible
                                            {"name"=>"ansible-srv1","prod_ip"=>"172.21.0.30","role"=>"ansible","custom_security_group"=>"ansible_security_group"},
                                            # prowler
					                        #{"name"=>"prowler-srv1","prod_ip"=>"172.21.0.31","role"=>"prowler"},
                                        ]
$splunk_hosts_override =                [
                                            # splunk
                                            # {"name"=>"splk-sh1","prod_ip"=>"172.21.0.40","role"=>"splunk_standalone","custom_security_group"=>"splunk_security_group"},
                                            # {"name"=>"splk-sh1","prod_ip"=>"172.21.0.41","role"=>"splunk_search_head","custom_security_group"=>"splunk_security_group"},
                                            # {"name"=>"splk-sh2","prod_ip"=>"172.21.0.42","role"=>"splunk_search_head","custom_security_group"=>"splunk_security_group"},
                                            # {"name"=>"splk-sh3","prod_ip"=>"172.21.0.43","role"=>"splunk_search_head,splunk_search_head_captain","custom_security_group"=>"splunk_security_group"},
                                            # {"name"=>"splk-lm1","prod_ip"=>"172.21.0.44","role"=>"splunk_license_master","custom_security_group"=>"splunk_security_group"},
                                            # {"name"=>"splk-dp1","prod_ip"=>"172.21.0.45","role"=>"splunk_deployment_server,splunk_license_master","custom_security_group"=>"splunk_security_group"},
                                            # {"name"=>"splk-cm1","prod_ip"=>"172.21.0.46","role"=>"splunk_cluster_master","custom_security_group"=>"splunk_security_group"},
                                            # {"name"=>"splk-sdp1","prod_ip"=>"172.21.0.47","role"=>"splunk_deployer","custom_security_group"=>"splunk_security_group"},
                                            # {"name"=>"splk-idx1","prod_ip"=>"172.21.0.48","role"=>"splunk_indexer","custom_security_group"=>"splunk_security_group"},
                                            # {"name"=>"splk-idx2","prod_ip"=>"172.21.0.49","role"=>"splunk_indexer","custom_security_group"=>"splunk_security_group"},
                                            # {"name"=>"splk-hf1","prod_ip"=>"172.21.0.50","role"=>"splunk_heavy_forwarder","custom_security_group"=>"splunk_security_group"},
                                            #{"name"=>"splk-uf1","prod_ip"=>"172.21.0.51","role"=>"splunk_universal_forwarder,suricata,syslog-collector","custom_security_group"=>"splunk_security_group"},
                                        ]                 
$kali_hosts_override =                   [
                                            # kali
                                            #{"name"=>"kali-pen1","prod_ip"=>"172.21.0.60","role"=>"kali" },
                                        ]

$pfsense_hosts_override =                   [
                                            # pfsense
                                            {"name"=>"pfsense-gw1","prod_ip"=>"172.21.0.254","role"=>"pfsense" },
                                        ]
# HOST HASHTABLES #
$centos_extra_vars = {
    "ansible_ssh_port"=>"22",
    "ansible_ssh_user"=>$settings['centos_user'],
    "ansible_ssh_pass"=>$settings['centos_password'],
    "ansible_become_password"=>$settings['centos_password'],
}

$splunk_extra_vars = {
    "ansible_ssh_port"=>"22",
    "ansible_ssh_user"=>$settings['centos_user'],
    "ansible_ssh_pass"=>$settings['centos_password'],
    "ansible_become_password"=>$settings['centos_password'],
}

$pfsense_extra_vars = {
    "ansible_ssh_port"=>"22",
    "ansible_ssh_user"=>$settings['pfsense_user'],
    "ansible_ssh_pass"=>$settings['pfsense_password'],
    "ansible_become_password"=>$settings['pfsense_password'],
}

$kali_extra_vars = {
    "ansible_ssh_port"=>"22",
    "ansible_ssh_user"=>$settings['kali_user'],
    "ansible_ssh_pass"=>$settings['kali_password'],
    "ansible_become_password"=>$settings['kali_password'],
}

$windows_extra_vars = {
    "ansible_connection"=>"winrm",
    "ansible_ssh_port"=>"5986",
    "ansible_ssh_user"=>$settings['win_build_admin_user'],
    "ansible_ssh_pass"=>$settings['win_build_admin_password'],
    "ansible_winrm_transport"=>"ntlm",
    "ansible_winrm_server_cert_validation"=>"ignore",
    "ansible_winrm_scheme"=>"https",
    "ansible_winrm_operation_timeout_sec"=>"120",
    "ansible_winrm_read_timeout_sec"=>"600",
}

$ansible_inventory = { 
    "all" => { 
        "children" => { 
            "local" => {
                "hosts" => {
                    "localhost" => {}
                },
                "vars" => {
                    "ansible_connection" => "local",
                    "ansible_python_interpreter" => "{{ ansible_playbook_python }}"
                }
            },
            "lab" => {
                "children" => {

                }
            } 
        } 
    } 
}

$roles = {}
$roles_prod = {
    "windows" => {
        "children" => {

                }
    },
    "linux" => {
        "children" => {
            
        }
    },
    "splunk" => {
        "children" => {

                }
    },
    "pentest" => {
        "children" => {

                }
    },
    "firewall" => {
        "children" => {

                }
    },
}

Vagrant.configure("2") do |config|
    # global variables
    $pfsense_count = $pfsense_hosts_override.count
    $pfsense_counter = 0
    $kali_count = $kali_hosts_override.count
    $kali_counter = 0
    $centos_count = $centos_hosts_override.count
    $centos_counter = 0
    $splunk_count = $splunk_hosts_override.count
    $splunk_counter = 0
    $win08_count = $win08_hosts_override.count
    $win08_counter = 0
    $win12_count = $win12_hosts_override.count
    $win12_counter = 0
    $win16_count = $win16_hosts_override.count
    $win16_counter = 0
    $win19_count = $win19_hosts_override.count
    $win19_counter = 0
    $win10_count = $win10_hosts_override.count
    $win10_counter = 0
    $win7_count = $win7_hosts_override.count
    $win7_counter = 0
    
    $pfsense_config = []
    $pfsense_hosts_override.each do |i|
        config.vm.define i['name'] do |pfsense|
            pfsense.ssh.insert_key = false
            pfsense.vm.boot_timeout = 600
            pfsense.vm.box = "vmware-pfsense"
            pfsense.ssh.username = $pfsense_extra_vars['ansible_ssh_user']
            pfsense.ssh.password = $pfsense_extra_vars['ansible_ssh_pass']
            pfsense.vm.synced_folder ".", "/vagrant", disabled: true
            pfsense.vm.provider :vmware_desktop do |v, override|
                v.gui = true
                v.vmx["displayName"] = i['name']
                v.vmx["memsize"] = "1024"
                v.vmx["numvcpus"] = "2"
                v.vmx["ethernet0.wakeOnPcktRcv"] = "FALSE"
                v.vmx["ethernet0.pcislotnumber"] = "32"
                v.vmx["ethernet1.virtualDev"] = "e1000"
                v.vmx["ethernet1.connectiontype"] = "custom"
                v.vmx["ethernet1.vnet"] = "vmnet3"
                v.vmx["ethernet1.pciSlotNumber"] = "33"
                v.vmx["ethernet1.present"] = "TRUE"
                v.vmx["ethernet1.wakeOnPcktRcv"] = "FALSE"
                v.vmx["ethernet1.noPromisc"] = "FALSE"
                v.vmx["tools.upgrade.policy"] = "manual"
            end

            pfsense.trigger.after :up do |trigger|
                trigger.ruby do |env,machine|
                    puts("Machine id: #{machine.id}")
                    $pfsense_config.push(machine.id)
                    mac=`grep "ethernet0.generatedAddress = " "#{machine.id}" | awk -F " = " '{print $2}' | sed 's/"//g'`
                    ip=`vmrun getGuestIPAddress "#{machine.id}" -wait`
                    if $?.exitstatus == 0
                        puts("Found mac address: #{mac}")
                        puts("Found ip address: #{ip}")
                    else
                        puts("Found mac address: #{mac}")
                        puts("Error - ip address: #{ip}")
                        
                        ip=`cat /etc/vmware/vmnet8/dhcpd/dhcpd.leases |  egrep -o 'lease.*{|ethernet.*;' | awk '{print $2}' | xargs -n 2 | cut -d ';' -f 1 | grep "#{mac}" | tail -1 | awk '{print $1}'`
                        puts("Found ip address in dhcp leases: #{ip}")
                    end
                    host_hash = $pfsense_hosts_override.find { |h| h['name'] == i['name'] }
                    host_hash['ansible_host'] = ip.strip
                    host_hash['prod_mac'] = mac.strip
                    $pfsense_counter+=1
                    complete_build
                end
            end
        end
    end

    $kali_config = []
    $kali_hosts_override.each do |i|
        config.vm.define i['name'] do |kali|
            kali.ssh.insert_key = false
            kali.vm.boot_timeout = 600
            kali.vm.box = "vmware-kali"
            kali.vm.guest = :windows
            kali.ssh.username = $kali_extra_vars['ansible_ssh_user']
            kali.ssh.password = $kali_extra_vars['ansible_ssh_pass']
            kali.vm.synced_folder ".", "/vagrant", disabled: true
            kali.vm.provider :vmware_desktop do |v, override|
                v.gui = true
                v.vmx["displayName"] = i['name']
                v.vmx["memsize"] = "1024"
                v.vmx["numvcpus"] = "2"
                v.vmx["ethernet0.pcislotnumber"] = "32"
                v.vmx["tools.upgrade.policy"] = "manual"
            end

            kali.trigger.after :up do |trigger|
                trigger.ruby do |env,machine|
                    puts("Machine id: #{machine.id}")
                    $kali_config.push(machine.id)
                    mac=`grep "ethernet0.generatedAddress = " "#{machine.id}" | awk -F " = " '{print $2}' | sed 's/"//g'`
                    ip=`vmrun getGuestIPAddress "#{machine.id}" -wait`
                    if $?.exitstatus == 0
                        puts("Found mac address: #{mac}")
                        puts("Found ip address: #{ip}")
                    else
                        puts("Found mac address: #{mac}")
                        puts("Error - ip address: #{ip}")
                        
                        ip=`cat /etc/vmware/vmnet8/dhcpd/dhcpd.leases |  egrep -o 'lease.*{|ethernet.*;' | awk '{print $2}' | xargs -n 2 | cut -d ';' -f 1 | grep "#{mac}" | tail -1 | awk '{print $1}'`
                        puts("Found ip address in dhcp leases: #{ip}")
                    end
                    host_hash = $kali_hosts_override.find { |h| h['name'] == i['name'] }
                    host_hash['ansible_host'] = ip.strip
                    host_hash['prod_mac'] = mac.strip
                    $kali_counter+=1
                    complete_build
                end
            end
        end
    end

    $centos_config = []
    $centos_hosts_override.each do |i|
        config.vm.define i['name'] do |centos|
            centos.ssh.insert_key = false
            centos.vm.boot_timeout = 600
            centos.vm.box = "vmware-centos8"
            centos.ssh.username = $centos_extra_vars['ansible_ssh_user']
            centos.ssh.password = $centos_extra_vars['ansible_ssh_pass']
            centos.vm.synced_folder ".", "/vagrant", disabled: true
            centos.vm.provider :vmware_desktop do |v, override|
                v.gui = true
                v.vmx["displayName"] = i['name']
                v.vmx["memsize"] = "1024"
                v.vmx["numvcpus"] = "2"
                v.vmx["ethernet0.pcislotnumber"] = "32"
                #v.vmx["ethernet1.noPromisc"] = "FALSE"
                v.vmx["tools.upgrade.policy"] = "manual"
            end

            centos.trigger.after :up do |trigger|
                trigger.ruby do |env,machine|
                    puts("Machine id: #{machine.id}")
                    $centos_config.push(machine.id)
                    mac=`grep "ethernet0.generatedAddress = " "#{machine.id}" | awk -F " = " '{print $2}' | sed 's/"//g'`
                    ip=`vmrun getGuestIPAddress "#{machine.id}" -wait`
                    if $?.exitstatus == 0
                        puts("Found mac address: #{mac}")
                        puts("Found ip address: #{ip}")
                    else
                        puts("Found mac address: #{mac}")
                        puts("Error - ip address: #{ip}")
                        
                        ip=`cat /etc/vmware/vmnet8/dhcpd/dhcpd.leases |  egrep -o 'lease.*{|ethernet.*;' | awk '{print $2}' | xargs -n 2 | cut -d ';' -f 1 | grep "#{mac}" | tail -1 | awk '{print $1}'`
                        puts("Found ip address in dhcp leases: #{ip}")
                    end
                    host_hash = $centos_hosts_override.find { |h| h['name'] == i['name'] }
                    host_hash['ansible_host'] = ip.strip
                    host_hash['prod_mac'] = mac.strip
                    $centos_counter+=1
                    complete_build
                end
            end
        end
    end

    $splunk_config = []
    $splunk_hosts_override.each do |i|
        config.vm.define i['name'] do |splunk|
            splunk.ssh.insert_key = false
            splunk.vm.boot_timeout = 600
            splunk.vm.box = "vmware-centos8"
            splunk.ssh.username = $splunk_extra_vars['ansible_ssh_user']
            splunk.ssh.password = $splunk_extra_vars['ansible_ssh_pass']
            splunk.vm.synced_folder ".", "/vagrant", disabled: true
            splunk.vm.provider :vmware_desktop do |v, override|
                v.gui = true
                v.vmx["displayName"] = i['name']
                v.vmx["memsize"] = "1024"
                v.vmx["numvcpus"] = "2"
                v.vmx["ethernet0.pcislotnumber"] = "32"
                #v.vmx["ethernet1.noPromisc"] = "FALSE"
                v.vmx["tools.upgrade.policy"] = "manual"
            end

            splunk.trigger.after :up do |trigger|
                trigger.ruby do |env,machine|
                    puts("Machine id: #{machine.id}")
                    $splunk_config.push(machine.id)
                    mac=`grep "ethernet0.generatedAddress = " "#{machine.id}" | awk -F " = " '{print $2}' | sed 's/"//g'`
                    ip=`vmrun getGuestIPAddress "#{machine.id}" -wait`
                    if $?.exitstatus == 0
                        puts("Found mac address: #{mac}")
                        puts("Found ip address: #{ip}")
                    else
                        puts("Found mac address: #{mac}")
                        puts("Error - ip address: #{ip}")
                        
                        ip=`cat /etc/vmware/vmnet8/dhcpd/dhcpd.leases |  egrep -o 'lease.*{|ethernet.*;' | awk '{print $2}' | xargs -n 2 | cut -d ';' -f 1 | grep "#{mac}" | tail -1 | awk '{print $1}'`
                        puts("Found ip address in dhcp leases: #{ip}")
                    end
                    host_hash = $splunk_hosts_override.find { |h| h['name'] == i['name'] }
                    host_hash['ansible_host'] = ip.strip
                    host_hash['prod_mac'] = mac.strip
                    $splunk_counter+=1
                    complete_build
                end
            end
        end
    end

    $win08_config = []
    $win08_hosts_override.each.each do |i|
        config.vm.define i['name'] do |win08|
            win08.vm.boot_timeout = 900
            win08.winrm.retry_delay = 5
            win08.winrm.max_tries = 50
            win08.vm.box = "vmware-windows_2008_r2"
            win08.winrm.transport = $windows_extra_vars['ansible_winrm_scheme']=="https" ? :ssl : :basic
            win08.winrm.ssl_peer_verification = $windows_extra_vars['ansible_winrm_server_cert_validation']=="ignore" ? false : true
            win08.winrm.port = $windows_extra_vars['ansible_ssh_port']
            win08.vm.communicator = $windows_extra_vars['ansible_connection']
            win08.winrm.username = $windows_extra_vars['ansible_ssh_user']
            win08.winrm.password = $windows_extra_vars['ansible_ssh_pass']
            win08.vm.guest = :windows
            win08.windows.halt_timeout = 15       
            win08.vm.synced_folder ".", "/vagrant", disabled: true
            win08.vm.provider :vmware_desktop do |v, override|
                v.gui = true
                v.vmx["displayName"] = i['name']
                v.vmx["memsize"] = "1536"
                v.vmx["numvcpus"] = "2"
                v.vmx["ethernet0.pcislotnumber"] = "32"
                v.vmx["ethernet0.virtualDev"] = "e1000"
                v.vmx["RemoteDisplay.vnc.enabled"] = "false"
                v.vmx["RemoteDisplay.vnc.port"] = "5900"
                v.vmx["gui.fitguestusingnativedisplayresolution"] = "FALSE"
                v.whitelist_verified = true
                v.vmx["hgfs.linkRootShare"] = "FALSE"
                v.vmx["tools.upgrade.policy"] = "manual"
            end

            # absurd hack to get around vagrant support for winrm hardened os
            win08.trigger.after :up do |trigger|
                trigger.ruby do |env,machine|
                    puts("Machine id: #{machine.id}")
                    $win08_config.push(machine.id)
                    mac=`grep "ethernet0.generatedAddress = " "#{machine.id}" | awk -F " = " '{print $2}' | sed 's/"//g'`
                    ip=`vmrun getGuestIPAddress "#{machine.id}" -wait`
                    if $?.exitstatus == 0
                        puts("Found mac address: #{mac}")
                        puts("Found ip address: #{ip}")
                    else
                        puts("Found mac address: #{mac}")
                        puts("Error - ip address: #{ip}")
                        ip=`cat /etc/vmware/vmnet8/dhcpd/dhcpd.leases |  egrep -o 'lease.*{|ethernet.*;' | awk '{print $2}' | xargs -n 2 | cut -d ';' -f 1 | grep "#{mac}" | tail -1 | awk '{print $1}'`
                        puts("Found ip address in dhcp leases: #{ip}")
                    end
                    host_hash = $win08_hosts_override.find { |h| h['name'] == i['name'] }
                    host_hash['ansible_host'] = ip.strip
                    host_hash['prod_mac'] = mac.strip
                    $win08_counter+=1
                    complete_build
                end
            end
        end
    end

    $win12_config = []
    $win12_hosts_override.each.each do |i|
        config.vm.define i['name'] do |win12|
            win12.vm.boot_timeout = 900
            win12.winrm.retry_delay = 5
            win12.winrm.max_tries = 50
            win12.vm.box = "vmware-windows_2012_r2"
            win12.winrm.transport = $windows_extra_vars['ansible_winrm_scheme']=="https" ? :ssl : :basic
            win12.winrm.ssl_peer_verification = $windows_extra_vars['ansible_winrm_server_cert_validation']=="ignore" ? false : true
            win12.winrm.port = $windows_extra_vars['ansible_ssh_port']
            win12.vm.communicator = $windows_extra_vars['ansible_connection']
            win12.winrm.username = $windows_extra_vars['ansible_ssh_user']
            win12.winrm.password = $windows_extra_vars['ansible_ssh_pass']
            win12.vm.guest = :windows
            win12.windows.halt_timeout = 15       
            win12.vm.synced_folder ".", "/vagrant", disabled: true
            win12.vm.provider :vmware_desktop do |v, override|
                v.gui = true
                v.vmx["displayName"] = i['name']
                v.vmx["memsize"] = "1536"
                v.vmx["numvcpus"] = "2"
                v.vmx["ethernet0.pcislotnumber"] = "32"
                v.vmx["ethernet0.virtualDev"] = "e1000"
                v.vmx["RemoteDisplay.vnc.enabled"] = "false"
                v.vmx["RemoteDisplay.vnc.port"] = "5900"
                v.vmx["gui.fitguestusingnativedisplayresolution"] = "FALSE"
                v.whitelist_verified = true
                v.vmx["hgfs.linkRootShare"] = "FALSE"
                v.vmx["tools.upgrade.policy"] = "manual"
            end

            # absurd hack to get around vagrant support for winrm hardened os
            win12.trigger.after :up do |trigger|
                trigger.ruby do |env,machine|
                    puts("Machine id: #{machine.id}")
                    $win12_config.push(machine.id)
                    mac=`grep "ethernet0.generatedAddress = " "#{machine.id}" | awk -F " = " '{print $2}' | sed 's/"//g'`
                    ip=`vmrun getGuestIPAddress "#{machine.id}" -wait`
                    if $?.exitstatus == 0
                        puts("Found mac address: #{mac}")
                        puts("Found ip address: #{ip}")
                    else
                        puts("Found mac address: #{mac}")
                        puts("Error - ip address: #{ip}")
                        ip=`cat /etc/vmware/vmnet8/dhcpd/dhcpd.leases |  egrep -o 'lease.*{|ethernet.*;' | awk '{print $2}' | xargs -n 2 | cut -d ';' -f 1 | grep "#{mac}" | tail -1 | awk '{print $1}'`
                        puts("Found ip address in dhcp leases: #{ip}")
                    end
                    host_hash = $win12_hosts_override.find { |h| h['name'] == i['name'] }
                    host_hash['ansible_host'] = ip.strip
                    host_hash['prod_mac'] = mac.strip
                    $win12_counter+=1
                    complete_build
                end
            end
        end
    end

    $win16_config = []
    $win16_hosts_override.each.each do |i|
        config.vm.define i['name'] do |win16|
            win16.vm.boot_timeout = 900
            win16.winrm.retry_delay = 5
            win16.winrm.max_tries = 50
            win16.vm.box = "vmware-windows_2016"
            win16.winrm.transport = $windows_extra_vars['ansible_winrm_scheme']=="https" ? :ssl : :basic
            win16.winrm.ssl_peer_verification = $windows_extra_vars['ansible_winrm_server_cert_validation']=="ignore" ? false : true
            win16.winrm.port = $windows_extra_vars['ansible_ssh_port']
            win16.vm.communicator = $windows_extra_vars['ansible_connection']
            win16.winrm.username = $windows_extra_vars['ansible_ssh_user']
            win16.winrm.password = $windows_extra_vars['ansible_ssh_pass']
            win16.vm.guest = :windows
            win16.windows.halt_timeout = 15       
            win16.vm.synced_folder ".", "/vagrant", disabled: true
            win16.vm.provider :vmware_desktop do |v, override|
                v.gui = true
                v.vmx["displayName"] = i['name']
                v.vmx["memsize"] = "1536"
                v.vmx["numvcpus"] = "2"
                v.vmx["ethernet0.pcislotnumber"] = "32"
                v.vmx["ethernet0.virtualDev"] = "e1000"
                v.vmx["RemoteDisplay.vnc.enabled"] = "false"
                v.vmx["RemoteDisplay.vnc.port"] = "5900"
                v.vmx["gui.fitguestusingnativedisplayresolution"] = "FALSE"
                v.whitelist_verified = true
                v.vmx["hgfs.linkRootShare"] = "FALSE"
                v.vmx["tools.upgrade.policy"] = "manual"
            end

            # absurd hack to get around vagrant support for winrm hardened os
            win16.trigger.after :up do |trigger|
                trigger.ruby do |env,machine|
                    puts("Machine id: #{machine.id}")
                    $win16_config.push(machine.id)
                    mac=`grep "ethernet0.generatedAddress = " "#{machine.id}" | awk -F " = " '{print $2}' | sed 's/"//g'`
                    ip=`vmrun getGuestIPAddress "#{machine.id}" -wait`
                    if $?.exitstatus == 0
                        puts("Found mac address: #{mac}")
                        puts("Found ip address: #{ip}")
                    else
                        puts("Found mac address: #{mac}")
                        puts("Error - ip address: #{ip}")
                        ip=`cat /etc/vmware/vmnet8/dhcpd/dhcpd.leases |  egrep -o 'lease.*{|ethernet.*;' | awk '{print $2}' | xargs -n 2 | cut -d ';' -f 1 | grep "#{mac}" | tail -1 | awk '{print $1}'`
                        puts("Found ip address in dhcp leases: #{ip}")
                    end
                    host_hash = $win16_hosts_override.find { |h| h['name'] == i['name'] }
                    host_hash['ansible_host'] = ip.strip
                    host_hash['prod_mac'] = mac.strip
                    $win16_counter+=1
                    complete_build
                end
            end
        end
    end

    $win19_config = []
    $win19_hosts_override.each.each do |i|
        config.vm.define i['name'] do |win19|
            win19.vm.boot_timeout = 900
            win19.winrm.retry_delay = 5
            win19.winrm.max_tries = 50
            win19.vm.box = "vmware-windows_2019"
            win19.winrm.transport = $windows_extra_vars['ansible_winrm_scheme']=="https" ? :ssl : :basic
            win19.winrm.ssl_peer_verification = $windows_extra_vars['ansible_winrm_server_cert_validation']=="ignore" ? false : true
            win19.winrm.port = $windows_extra_vars['ansible_ssh_port']
            win19.vm.communicator = $windows_extra_vars['ansible_connection']
            win19.winrm.username = $windows_extra_vars['ansible_ssh_user']
            win19.winrm.password = $windows_extra_vars['ansible_ssh_pass']
            win19.vm.guest = :windows
            win19.windows.halt_timeout = 15       
            win19.vm.synced_folder ".", "/vagrant", disabled: true
            win19.vm.provider :vmware_desktop do |v, override|
                v.gui = true
                v.vmx["displayName"] = i['name']
                v.vmx["memsize"] = "1536"
                v.vmx["numvcpus"] = "2"
                v.vmx["ethernet0.pcislotnumber"] = "32"
                v.vmx["ethernet0.virtualDev"] = "e1000"
                v.vmx["RemoteDisplay.vnc.enabled"] = "false"
                v.vmx["RemoteDisplay.vnc.port"] = "5900"
                v.vmx["gui.fitguestusingnativedisplayresolution"] = "FALSE"
                v.whitelist_verified = true
                v.vmx["hgfs.linkRootShare"] = "FALSE"
                v.vmx["tools.upgrade.policy"] = "manual"
            end

            # absurd hack to get around vagrant support for winrm hardened os
            win19.trigger.after :up do |trigger|
                trigger.ruby do |env,machine|
                    puts("Machine id: #{machine.id}")
                    $win19_config.push(machine.id)
                    mac=`grep "ethernet0.generatedAddress = " "#{machine.id}" | awk -F " = " '{print $2}' | sed 's/"//g'`
                    ip=`vmrun getGuestIPAddress "#{machine.id}" -wait`
                    if $?.exitstatus == 0
                        puts("Found mac address: #{mac}")
                        puts("Found ip address: #{ip}")
                    else
                        puts("Found mac address: #{mac}")
                        puts("Error - ip address: #{ip}")
                        ip=`cat /etc/vmware/vmnet8/dhcpd/dhcpd.leases |  egrep -o 'lease.*{|ethernet.*;' | awk '{print $2}' | xargs -n 2 | cut -d ';' -f 1 | grep "#{mac}" | tail -1 | awk '{print $1}'`
                        puts("Found ip address in dhcp leases: #{ip}")
                    end
                    host_hash = $win19_hosts_override.find { |h| h['name'] == i['name'] }
                    host_hash['ansible_host'] = ip.strip
                    host_hash['prod_mac'] = mac.strip
                    $win19_counter+=1
                    complete_build
                end
            end
        end
    end

    $win10_config = []
    $win10_hosts_override.each.each do |i|
        config.vm.define i['name'] do |win10|
            win10.vm.boot_timeout = 900
            win10.winrm.retry_delay = 5
            win10.winrm.max_tries = 50
            win10.vm.box = "vmware-windows_10"
            win10.winrm.transport = $windows_extra_vars['ansible_winrm_scheme']=="https" ? :ssl : :basic
            win10.winrm.ssl_peer_verification = $windows_extra_vars['ansible_winrm_server_cert_validation']=="ignore" ? false : true
            win10.winrm.port = $windows_extra_vars['ansible_ssh_port']
            win10.vm.communicator = $windows_extra_vars['ansible_connection']
            win10.winrm.username = $windows_extra_vars['ansible_ssh_user']
            win10.winrm.password = $windows_extra_vars['ansible_ssh_pass']
            win10.vm.guest = :windows
            win10.windows.halt_timeout = 15       
            win10.vm.synced_folder ".", "/vagrant", disabled: true
            win10.vm.provider :vmware_desktop do |v, override|
                v.gui = true
                v.vmx["displayName"] = i['name']
                v.vmx["memsize"] = "1024"
                v.vmx["numvcpus"] = "2"
                v.vmx["ethernet0.pcislotnumber"] = "32"
                v.vmx["ethernet0.virtualDev"] = "e1000"
                v.vmx["RemoteDisplay.vnc.enabled"] = "false"
                v.vmx["RemoteDisplay.vnc.port"] = "5900"
                v.vmx["gui.fitguestusingnativedisplayresolution"] = "FALSE"
                v.whitelist_verified = true
                v.vmx["hgfs.linkRootShare"] = "FALSE"
                v.vmx["tools.upgrade.policy"] = "manual"
            end
            

            # absurd hack to get around vagrant support for winrm hardened os
            win10.trigger.after :up do |trigger|
                trigger.ruby do |env,machine|
                    puts("Machine id: #{machine.id}")
                    $win10_config.push(machine.id)
                    mac=`grep "ethernet0.generatedAddress = " "#{machine.id}" | awk -F " = " '{print $2}' | sed 's/"//g'`
                    ip=`vmrun getGuestIPAddress "#{machine.id}" -wait`
                    if $?.exitstatus == 0
                        puts("Found mac address: #{mac}")
                        puts("Found ip address: #{ip}")
                    else
                        puts("Found mac address: #{mac}")
                        puts("Error - ip address: #{ip}")
                        ip=`cat /etc/vmware/vmnet8/dhcpd/dhcpd.leases |  egrep -o 'lease.*{|ethernet.*;' | awk '{print $2}' | xargs -n 2 | cut -d ';' -f 1 | grep "#{mac}" | tail -1 | awk '{print $1}'`
                        puts("Found ip address in dhcp leases: #{ip}")
                    end
                    host_hash = $win10_hosts_override.find { |h| h['name'] == i['name'] }
                    host_hash['ansible_host'] = ip.strip
                    host_hash['prod_mac'] = mac.strip
                    $win10_counter+=1
                    complete_build
                end
            end
        end
    end
    
    $win7_config = []
    $win7_hosts_override.each do |i|
        config.vm.define i['name'] do |win7|
            win7.vm.boot_timeout = 900
            win7.winrm.retry_delay = 5
            win7.winrm.max_tries = 50
            win7.vm.box = "vmware-windows_7"
            win7.winrm.transport = $windows_extra_vars['ansible_winrm_scheme']=="https" ? :ssl : :basic
            win7.winrm.ssl_peer_verification = $windows_extra_vars['ansible_winrm_server_cert_validation']=="ignore" ? false : true
            win7.winrm.port = $windows_extra_vars['ansible_ssh_port']
            win7.vm.communicator = $windows_extra_vars['ansible_connection']
            win7.winrm.username = $windows_extra_vars['ansible_ssh_user']
            win7.winrm.password = $windows_extra_vars['ansible_ssh_pass']
            win7.vm.guest = :windows
            win7.windows.halt_timeout = 15       
            win7.vm.synced_folder ".", "/vagrant", disabled: true
            win7.vm.provider :vmware_desktop do |v, override|
                v.gui = true
                v.vmx["displayName"] = i['name']
                v.vmx["memsize"] = "1024"
                v.vmx["numvcpus"] = "2"
                v.vmx["ethernet0.pcislotnumber"] = "32"
                v.vmx["ethernet0.virtualDev"] = "e1000"
                v.vmx["RemoteDisplay.vnc.enabled"] = "false"
                v.vmx["RemoteDisplay.vnc.port"] = "5900"
                v.vmx["gui.fitguestusingnativedisplayresolution"] = "FALSE"
                v.whitelist_verified = true
                v.vmx["hgfs.linkRootShare"] = "FALSE"
                v.vmx["tools.upgrade.policy"] = "manual"
            end

            # absurd hack to get around vagrant support for winrm hardened os
            win7.trigger.after :up do |trigger|
                trigger.ruby do |env,machine|
                    $win7_config.push(machine.id)
                    
                    puts("Machine id: #{machine.id}")
                    sleep(30)
                    mac=`grep "ethernet0.generatedAddress = " "#{machine.id}" | awk -F " = " '{print $2}' | sed 's/"//g'`
                    ip=`vmrun getGuestIPAddress "#{machine.id}" -wait`
                    if $?.exitstatus == 0
                        puts("Found mac address: #{mac}")
                        puts("Found ip address: #{ip}")
                    else
                        puts("Found mac address: #{mac}")
                        puts("Error - ip address: #{ip}")
                        ip=`cat /etc/vmware/vmnet8/dhcpd/dhcpd.leases |  egrep -o 'lease.*{|ethernet.*;' | awk '{print $2}' | xargs -n 2 | cut -d ';' -f 1 | grep "#{mac}" | tail -1 | awk '{print $1}'`
                        puts("Found ip address in dhcp leases: #{ip}")
                    end
                    host_hash = $win7_hosts_override.find { |h| h['name'] == i['name'] }
                    host_hash['ansible_host'] = ip.strip
                    host_hash['prod_mac'] = mac.strip

                    $win7_counter+=1
                    complete_build
                end
            end
        end
    end

    def complete_build()
        if $win7_counter == $win7_count && $win10_counter == $win10_count && $win19_counter == $win19_count && $win16_counter == $win16_count && $win12_counter == $win12_count && $win08_counter == $win08_count && $centos_counter == $centos_count && $splunk_counter == $splunk_count && $kali_counter == $kali_count && $pfsense_counter == $pfsense_count
            # build inventory - windows
            $roles_prod['windows']['children'] = {}
            $win08_hosts_override.each do |i|
                i['role'].split(",").each do |r|
                    # build inventory template roles
                    if $roles[r] != nil
                        $roles[r]["hosts"][i['name']] = $windows_extra_vars.clone
                        $roles[r]["hosts"][i['name']]['ansible_host'] = i['ansible_host']
                        $roles[r]["hosts"][i['name']]['prod_ip'] = i['prod_ip']
                        $roles[r]["hosts"][i['name']]['prod_mac'] = i['prod_mac']
                    else
                        $roles[r] = {"hosts"=>{ i['name'] => $windows_extra_vars.clone}}
                        $roles[r]["hosts"][i['name']]['ansible_host'] = i['ansible_host']
                        $roles[r]["hosts"][i['name']]['prod_ip'] = i['prod_ip']
                        $roles[r]["hosts"][i['name']]['prod_mac'] = i['prod_mac']
                    end

                    # prod inventory template roles
                    if $roles_prod['windows']['children'][r] != nil
                        $roles_prod['windows']['children'][r]["hosts"][i['name']] = $windows_extra_vars.without("ansible_ssh_user","ansible_ssh_pass")
                    else
                        $roles_prod['windows']['children'][r] = {"hosts"=>{ i['name'] => $windows_extra_vars.without("ansible_ssh_user","ansible_ssh_pass")}}
                    end
                end
            end

            $win12_hosts_override.each do |i|
                i['role'].split(",").each do |r|
                    # build inventory template roles
                    if $roles[r] != nil
                        $roles[r]["hosts"][i['name']] = $windows_extra_vars.clone
                        $roles[r]["hosts"][i['name']]['ansible_host'] = i['ansible_host']
                        $roles[r]["hosts"][i['name']]['prod_ip'] = i['prod_ip']
                        $roles[r]["hosts"][i['name']]['prod_mac'] = i['prod_mac']
                    else
                        $roles[r] = {"hosts"=>{ i['name'] => $windows_extra_vars.clone}}
                        $roles[r]["hosts"][i['name']]['ansible_host'] = i['ansible_host']
                        $roles[r]["hosts"][i['name']]['prod_ip'] = i['prod_ip']
                        $roles[r]["hosts"][i['name']]['prod_mac'] = i['prod_mac']
                    end

                    # prod inventory template roles
                    if $roles_prod['windows']['children'][r] != nil
                        $roles_prod['windows']['children'][r]["hosts"][i['name']] = $windows_extra_vars.without("ansible_ssh_user","ansible_ssh_pass")
                    else
                        $roles_prod['windows']['children'][r] = {"hosts"=>{ i['name'] => $windows_extra_vars.without("ansible_ssh_user","ansible_ssh_pass")}}
                    end
                end
            end

            $win16_hosts_override.each do |i|
                i['role'].split(",").each do |r|
                    # build inventory template roles
                    if $roles[r] != nil
                        $roles[r]["hosts"][i['name']] = $windows_extra_vars.clone
                        $roles[r]["hosts"][i['name']]['ansible_host'] = i['ansible_host']
                        $roles[r]["hosts"][i['name']]['prod_ip'] = i['prod_ip']
                        $roles[r]["hosts"][i['name']]['prod_mac'] = i['prod_mac']
                    else
                        $roles[r] = {"hosts"=>{ i['name'] => $windows_extra_vars.clone}}
                        $roles[r]["hosts"][i['name']]['ansible_host'] = i['ansible_host']
                        $roles[r]["hosts"][i['name']]['prod_ip'] = i['prod_ip']
                        $roles[r]["hosts"][i['name']]['prod_mac'] = i['prod_mac']
                    end

                    # prod inventory template roles
                    if $roles_prod['windows']['children'][r] != nil
                        $roles_prod['windows']['children'][r]["hosts"][i['name']] = $windows_extra_vars.without("ansible_ssh_user","ansible_ssh_pass")
                    else
                        $roles_prod['windows']['children'][r] = {"hosts"=>{ i['name'] => $windows_extra_vars.without("ansible_ssh_user","ansible_ssh_pass")}}
                    end
                end
            end

            $win19_hosts_override.each do |i|
                i['role'].split(",").each do |r|
                    # build inventory template roles
                    if $roles[r] != nil
                        $roles[r]["hosts"][i['name']] = $windows_extra_vars.clone
                        $roles[r]["hosts"][i['name']]['ansible_host'] = i['ansible_host']
                        $roles[r]["hosts"][i['name']]['prod_ip'] = i['prod_ip']
                        $roles[r]["hosts"][i['name']]['prod_mac'] = i['prod_mac']
                    else
                        $roles[r] = {"hosts"=>{ i['name'] => $windows_extra_vars.clone}}
                        $roles[r]["hosts"][i['name']]['ansible_host'] = i['ansible_host']
                        $roles[r]["hosts"][i['name']]['prod_ip'] = i['prod_ip']
                        $roles[r]["hosts"][i['name']]['prod_mac'] = i['prod_mac']
                    end

                    # prod inventory template roles
                    if $roles_prod['windows']['children'][r] != nil
                        $roles_prod['windows']['children'][r]["hosts"][i['name']] = $windows_extra_vars.without("ansible_ssh_user","ansible_ssh_pass")
                    else
                        $roles_prod['windows']['children'][r] = {"hosts"=>{ i['name'] => $windows_extra_vars.without("ansible_ssh_user","ansible_ssh_pass")}}
                    end
                end
            end
            
            $win10_hosts_override.each do |i|
                i['role'].split(",").each do |r|
                    # build inventory template roles
                    if $roles[r] != nil
                        $roles[r]["hosts"][i['name']] = $windows_extra_vars.clone
                        $roles[r]["hosts"][i['name']]['ansible_host'] = i['ansible_host']
                        $roles[r]["hosts"][i['name']]['prod_ip'] = i['prod_ip']
                        $roles[r]["hosts"][i['name']]['prod_mac'] = i['prod_mac']
                    else
                        $roles[r] = {"hosts"=>{ i['name'] => $windows_extra_vars.clone}}
                        $roles[r]["hosts"][i['name']]['ansible_host'] = i['ansible_host']
                        $roles[r]["hosts"][i['name']]['prod_ip'] = i['prod_ip']
                        $roles[r]["hosts"][i['name']]['prod_mac'] = i['prod_mac']
                    end

                    # prod inventory template roles
                    if $roles_prod['windows']['children'][r] != nil
                        $roles_prod['windows']['children'][r]["hosts"][i['name']] = $windows_extra_vars.without("ansible_ssh_user","ansible_ssh_pass")
                    else
                        $roles_prod['windows']['children'][r] = {"hosts"=>{ i['name'] => $windows_extra_vars.without("ansible_ssh_user","ansible_ssh_pass")}}
                    end
                end
            end
            
            $win7_hosts_override.each do |i|
                i['role'].split(",").each do |r|
                    # build inventory template roles
                    if $roles[r] != nil
                        $roles[r]["hosts"][i['name']] = $windows_extra_vars.clone
                        $roles[r]["hosts"][i['name']]['ansible_host'] = i['ansible_host']
                        $roles[r]["hosts"][i['name']]['prod_ip'] = i['prod_ip']
                        $roles[r]["hosts"][i['name']]['prod_mac'] = i['prod_mac']
                    else
                        $roles[r] = {"hosts"=>{ i['name'] => $windows_extra_vars.clone}}
                        $roles[r]["hosts"][i['name']]['ansible_host'] = i['ansible_host']
                        $roles[r]["hosts"][i['name']]['prod_ip'] = i['prod_ip']
                        $roles[r]["hosts"][i['name']]['prod_mac'] = i['prod_mac']
                    end

                    # prod inventory template roles
                    if $roles_prod['windows']['children'][r] != nil
                        $roles_prod['windows']['children'][r]["hosts"][i['name']] = $windows_extra_vars.without("ansible_ssh_user","ansible_ssh_pass")
                    else
                        $roles_prod['windows']['children'][r] = {"hosts"=>{ i['name'] => $windows_extra_vars.without("ansible_ssh_user","ansible_ssh_pass")}}
                    end
                end
            end
            
            # build inventory - linux
            $roles_prod['linux']['children'] = {}
            $centos_hosts_override.each do |i|
                i['role'].split(",").each do |r|
                    # build inventory template roles
                    if $roles[r] != nil
                        $roles[r]["hosts"][i['name']] = $centos_extra_vars.clone
                        $roles[r]["hosts"][i['name']]['ansible_host'] = i['ansible_host']
                        $roles[r]["hosts"][i['name']]['prod_ip'] = i['prod_ip']
                        $roles[r]["hosts"][i['name']]['prod_mac'] = i['prod_mac']
                    else
                        $roles[r] = {"hosts"=>{ i['name'] => $centos_extra_vars.clone}}
                        $roles[r]["hosts"][i['name']]['ansible_host'] = i['ansible_host']
                        $roles[r]["hosts"][i['name']]['prod_ip'] = i['prod_ip']
                        $roles[r]["hosts"][i['name']]['prod_mac'] = i['prod_mac']
                    end

                    # prod inventory template roles
                    if $roles_prod['linux']['children'][r] != nil
                        # remove ssh user/pass in favour of key based auth
                        $roles_prod['linux']['children'][r]["hosts"][i['name']] = $centos_extra_vars.without("ansible_ssh_user","ansible_ssh_pass","ansible_become_password")
                    else
                        # remove ssh user/pass in favour of key based auth
                        $roles_prod['linux']['children'][r] = {"hosts"=>{ i['name'] => $centos_extra_vars.without("ansible_ssh_user","ansible_ssh_pass","ansible_become_password")}}
                    end
                end
            end

            # build inventory - kali
            $roles_prod['pentest']['children'] = {}
            $kali_hosts_override.each do |i|
                i['role'].split(",").each do |r|
                    # build inventory template roles
                    if $roles[r] != nil
                        $roles[r]["hosts"][i['name']] = $kali_extra_vars.clone
                        $roles[r]["hosts"][i['name']]['ansible_host'] = i['ansible_host']
                        $roles[r]["hosts"][i['name']]['prod_ip'] = i['prod_ip']
                        $roles[r]["hosts"][i['name']]['prod_mac'] = i['prod_mac']
                    else
                        $roles[r] = {"hosts"=>{ i['name'] => $kali_extra_vars.clone}}
                        $roles[r]["hosts"][i['name']]['ansible_host'] = i['ansible_host']
                        $roles[r]["hosts"][i['name']]['prod_ip'] = i['prod_ip']
                        $roles[r]["hosts"][i['name']]['prod_mac'] = i['prod_mac']
                    end

                    # prod inventory template roles (kali doesn't use vagrant username, so we keep the ansible_ssh_user)
                    if $roles_prod['pentest']['children'][r] != nil
                        # remove ssh user/pass in favour of key based auth
                        $roles_prod['pentest']['children'][r]["hosts"][i['name']] = $kali_extra_vars.without("ansible_ssh_pass","ansible_become_password")
                    else
                        # remove ssh user/pass in favour of key based auth
                        $roles_prod['pentest']['children'][r] = {"hosts"=>{ i['name'] => $kali_extra_vars.without("ansible_ssh_pass","ansible_become_password")}}
                    end
                end
            end

            # build inventory - splunk
            $roles_prod['splunk']['children'] = {}
            $splunk_hosts_override.each do |i|
                i['role'].split(",").each do |r|
                    # build inventory template roles
                    if $roles[r] != nil
                        $roles[r]["hosts"][i['name']] = $centos_extra_vars.clone
                        $roles[r]["hosts"][i['name']]['ansible_host'] = i['ansible_host']
                        $roles[r]["hosts"][i['name']]['prod_ip'] = i['prod_ip']
                        $roles[r]["hosts"][i['name']]['prod_mac'] = i['prod_mac']
                    else
                        $roles[r] = {"hosts"=>{ i['name'] => $centos_extra_vars.clone}}
                        $roles[r]["hosts"][i['name']]['ansible_host'] = i['ansible_host']
                        $roles[r]["hosts"][i['name']]['prod_ip'] = i['prod_ip']
                        $roles[r]["hosts"][i['name']]['prod_mac'] = i['prod_mac']
                    end

                    # prod inventory template roles
                    if $roles_prod['splunk']['children'][r] != nil
                        # remove ssh user/pass in favour of key based auth
                        $roles_prod['splunk']['children'][r]["hosts"][i['name']] = $centos_extra_vars.without("ansible_ssh_user","ansible_ssh_pass","ansible_become_password")
                    else
                        # remove ssh user/pass in favour of key based auth
                        $roles_prod['splunk']['children'][r] = {"hosts"=>{ i['name'] => $centos_extra_vars.without("ansible_ssh_user","ansible_ssh_pass","ansible_become_password")}}
                    end
                end
            end

            # build inventory - pfsense
            $roles_prod['firewall']['children'] = {}
            $pfsense_hosts_override.each do |i|
                i['role'].split(",").each do |r|
                    # build inventory template roles
                    if $roles[r] != nil
                        $roles[r]["hosts"][i['name']] = $pfsense_extra_vars.clone
                        $roles[r]["hosts"][i['name']]['ansible_host'] = i['ansible_host']
                        $roles[r]["hosts"][i['name']]['prod_ip'] = i['prod_ip']
                        $roles[r]["hosts"][i['name']]['prod_mac'] = i['prod_mac']
                    else
                        $roles[r] = {"hosts"=>{ i['name'] => $pfsense_extra_vars.clone}}
                        $roles[r]["hosts"][i['name']]['ansible_host'] = i['ansible_host']
                        $roles[r]["hosts"][i['name']]['prod_ip'] = i['prod_ip']
                        $roles[r]["hosts"][i['name']]['prod_mac'] = i['prod_mac']
                    end

                    # prod inventory template roles
                    if $roles_prod['firewall']['children'][r] != nil
                        # remove ssh user/pass in favour of key based auth
                        $roles_prod['firewall']['children'][r]["hosts"][i['name']] = $pfsense_extra_vars.without("ansible_ssh_user","ansible_ssh_pass","ansible_become_password")
                    else
                        # remove ssh user/pass in favour of key based auth
                        $roles_prod['firewall']['children'][r] = {"hosts"=>{ i['name'] => $pfsense_extra_vars.without("ansible_ssh_user","ansible_ssh_pass","ansible_become_password")}}
                    end
                end
            end
            
            # clone inventory base for build and prod
            $ansible_inventory_prod = $ansible_inventory.clone

            # build inventory file
            $ansible_inventory['all']['children']['lab']['children'] = $roles
            File.write($INVENTORY_FILE, $ansible_inventory.to_yaml, mode: "a")
            
            # prod inventory file
            $ansible_inventory_prod['all']['children']['lab']['children'] = $roles_prod
            File.write($LAB_INVENTORY_FILE, $ansible_inventory_prod.to_yaml, mode: "a")
            

            # set hostname and ssh key based auth
            puts("Running post build configuration...")
            result=`cd #{$ANSIBLE_DIR} && ansible-playbook #{$PLAYBOOK_FILE} -i #{$INVENTORY_FILE} -v`
            puts(result)
            puts("Post build configuration complete.")

            # # update network interfaces for all hosts, moving to pfsense
            # puts("Pushing machines to prod network...")
            # $kali_config.each do |b| 
            #     puts("Updating network...")
            #     r=`vmrun stop "#{b}"`
            #     r=`sleep 10`
            #     r=`sed -i -e '/ethernet0\.connectiontype/d' "#{b}"`
            #     r=`sed -i -e '/ethernet0\.vnet/d' "#{b}"`
            #     r=`echo ethernet0.vnet = \"vmnet3\" >> "#{b}"`
            #     r=`echo ethernet0.connectiontype = \"custom\" >> "#{b}"`
            #     r=`vmrun start "#{b}"`
            #     puts("Update network complete.")
            # end

            # $centos_config.each do |b| 
            #     puts("Updating network...")
            #     r=`vmrun stop "#{b}"`
            #     r=`sleep 10`
            #     r=`sed -i -e '/ethernet0\.connectiontype/d' "#{b}"`
            #     r=`sed -i -e '/ethernet0\.vnet/d' "#{b}"`
            #     r=`echo ethernet0.vnet = \"vmnet3\" >> "#{b}"`
            #     r=`echo ethernet0.connectiontype = \"custom\" >> "#{b}"`
            #     r=`vmrun start "#{b}"`
            #     puts("Update network complete.")
            # end

            # $splunk_config.each do |b| 
            #     puts("Updating network...")
            #     r=`vmrun stop "#{b}"`
            #     r=`sleep 10`
            #     r=`sed -i -e '/ethernet0\.connectiontype/d' "#{b}"`
            #     r=`sed -i -e '/ethernet0\.vnet/d' "#{b}"`
            #     r=`echo ethernet0.vnet = \"vmnet3\" >> "#{b}"`
            #     r=`echo ethernet0.connectiontype = \"custom\" >> "#{b}"`
            #     r=`vmrun start "#{b}"`
            #     puts("Update network complete.")
            # end
            
            # $win08_config.each do |b| 
            #     puts("Updating network...")
            #     r=`vmrun stop "#{b}"`
            #     r=`sleep 10`
            #     r=`sed -i -e '/ethernet0\.connectiontype/d' "#{b}"`
            #     r=`sed -i -e '/ethernet0\.vnet/d' "#{b}"`
            #     r=`echo ethernet0.vnet = \"vmnet3\" >> "#{b}"`
            #     r=`echo ethernet0.connectiontype = \"custom\" >> "#{b}"`
            #     r=`vmrun start "#{b}"`
            #     puts("Update network complete.")
            # end

            # $win12_config.each do |b| 
            #     puts("Updating network...")
            #     r=`vmrun stop "#{b}"`
            #     r=`sleep 10`
            #     r=`sed -i -e '/ethernet0\.connectiontype/d' "#{b}"`
            #     r=`sed -i -e '/ethernet0\.vnet/d' "#{b}"`
            #     r=`echo ethernet0.vnet = \"vmnet3\" >> "#{b}"`
            #     r=`echo ethernet0.connectiontype = \"custom\" >> "#{b}"`
            #     r=`vmrun start "#{b}"`
            #     puts("Update network complete.")
            # end

            # $win16_config.each do |b| 
            #     puts("Updating network...")
            #     r=`vmrun stop "#{b}"`
            #     r=`sleep 10`
            #     r=`sed -i -e '/ethernet0\.connectiontype/d' "#{b}"`
            #     r=`sed -i -e '/ethernet0\.vnet/d' "#{b}"`
            #     r=`echo ethernet0.vnet = \"vmnet3\" >> "#{b}"`
            #     r=`echo ethernet0.connectiontype = \"custom\" >> "#{b}"`
            #     r=`vmrun start "#{b}"`
            #     puts("Update network complete.")
            # end

            # $win19_config.each do |b| 
            #     puts("Updating network...")
            #     r=`vmrun stop "#{b}"`
            #     r=`sleep 10`
            #     r=`sed -i -e '/ethernet0\.connectiontype/d' "#{b}"`
            #     r=`sed -i -e '/ethernet0\.vnet/d' "#{b}"`
            #     r=`echo ethernet0.vnet = \"vmnet3\" >> "#{b}"`
            #     r=`echo ethernet0.connectiontype = \"custom\" >> "#{b}"`
            #     r=`vmrun start "#{b}"`
            #     puts("Update network complete.")
            # end

            # $win10_config.each do |b| 
            #     puts("Updating network...")
            #     r=`vmrun stop "#{b}"`
            #     r=`sleep 10`
            #     r=`sed -i -e '/ethernet0\.connectiontype/d' "#{b}"`
            #     r=`sed -i -e '/ethernet0\.vnet/d' "#{b}"`
            #     r=`echo ethernet0.vnet = \"vmnet3\" >> "#{b}"`
            #     r=`echo ethernet0.connectiontype = \"custom\" >> "#{b}"`
            #     r=`vmrun start "#{b}"`
            #     puts("Update network complete.")
            # end

            # $win7_config.each do |b| 
            #     puts("Updating network...")
            #     r=`vmrun stop "#{b}"`
            #     r=`sleep 10`
            #     r=`sed -i -e '/ethernet0\.connectiontype/d' "#{b}"`
            #     r=`sed -i -e '/ethernet0\.vnet/d' "#{b}"`
            #     r=`echo ethernet0.vnet = \"vmnet3\" >> "#{b}"`
            #     r=`echo ethernet0.connectiontype = \"custom\" >> "#{b}"`
            #     r=`vmrun start "#{b}"`
            #     puts("Update network complete.")
            # end
            # puts("Prod network migration complete.")

            #  # updated known hosts with prod ip key
            #  puts("Running post prod migration configuration...")
            #  result=`cd #{$ANSIBLE_DIR} && ansible-playbook #{$PLAYBOOK_POST_PROD_FILE} -i #{$INVENTORY_FILE} -v`
            #  puts(result)
            #  puts("Post prod migration configuration complete.")
        else
            puts("Waiting for builds to complete...")
        end
    end
end
